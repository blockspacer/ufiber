trigger:
- master

jobs:
  - job: Linux
    displayName: 'Linux'
    pool:
      vmImage: 'Ubuntu-16.04'
    strategy:
      matrix:
        gccdefault_coverage:
          CMAKE_VARIANT: Debug
          CXXFLAGS: '-fprofile-arcs --coverage'
          CXX: g++
          CC: gcc
          INSTALL_PPAS: sudo apt install lcov -y
          SKIP_COVERAGE: 'false'
        gcc7debug:
          CMAKE_VARIANT: Debug
          CXX: g++-7
          CC: gcc-7
          INSTALL_PPAS: sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
        gcc8release:
          CMAKE_VARIANT: Release
          CXX: g++-8
          CC: gcc-8
          INSTALL_PPAS: sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
        gcc8asan:
          CMAKE_VARIANT: Debug
          CXX: g++-8
          CC: gcc-8
          SANITIZE: On
          INSTALL_PPAS: sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
        # clangdebug:
        #   CMAKE_VARIANT: Debug
        #   CXX: clang
        #   CC: clang
        # clangasan:
        #   CMAKE_VARIANT: Debug
        #   CXX: clang
        #   CC: clang
        #   CXXFLAGS: -fsanitize=address,undefined -pthread
        # clangrelease:
        #   CMAKE_VARIANT: Release
        #   CXX: clang
        #   CC: clang
    steps:
      - script: $INSTALL_PPAS && sudo apt-get update -y && sudo apt-get install $CXX binutils-gold cmake -y
        displayName: 'Install compiler'
      - script: ./tools/get_boost.sh
        displayName: 'Get Boost'
      - script: cmake -H. -Bbuild -DCMAKE_EXE_LINKER_FLAGS=-fuse-ld=gold -DUFIBER_SANITIZE=$SANITIZE -DCMAKE_BUILD_TYPE=$CMAKE_VARIANT && make -C build
        displayName: 'Build'
      - script: cd build && ctest --output-on-failure
        displayName: 'Run tests'
      - script: ./tools/coverage.sh && curl -s https://codecov.io/bash -o codecov && bash ./codecov -X gcov -f build/coverage.info -t $(CODECOV_TOKEN)
        displayName: 'Collect coverage'
        condition: and(succeeded(), eq(variables['SKIP_COVERAGE'], 'false'))

